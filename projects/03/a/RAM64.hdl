// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Negate address bits (these are used later at below)
    Not(in=address[3], out=notaddress3);
    Not(in=address[4], out=notaddress4);
    Not(in=address[5], out=notaddress5);

    // convert last 3 bits to list[3] in order to use RAM8
    Bit3toList(bit2=address[2], bit1=address[1], bit0=address[0], out=last3address);
    
    // 000...
    And(a=notaddress3, b=notaddress4, out=tmpaddr000);
    And(a=tmpaddr000, b=notaddress5, out=sel000);
    To16(sel=sel000, out=out16of000);
    And16(a=out16of000, b=in, out=in000);
    
    RAM8(in=in000, load=load, address=last3address, out=out000);

    // 001...
    And(a=address[3], b=notaddress4, out=tmpaddr001);
    And(a=tmpaddr001, b=notaddress5, out=sel001);
    To16(sel=sel001, out=out16of001);
    And16(a=out16of001, b=in, out=in001);

    RAM8(in=in001, load=load, address=last3address, out=out001);

    // 010...
    And(a=notaddress3, b=address[4], out=tmpaddr010);
    And(a=tmpaddr010, b=notaddress5, out=sel010);
    To16(sel=sel010, out=out16of010);
    And16(a=out16of010, b=in, out=in010);

    RAM8(in=in010, load=load, address=last3address, out=out010);

    // 011...
    And(a=address[3], b=address[4], out=tmpaddr011);
    And(a=tmpaddr011, b=notaddress5, out=sel011);
    To16(sel=sel011, out=out16of011);
    And16(a=out16of011, b=in, out=in011);

    RAM8(in=in011, load=load, address=last3address, out=out011);

    // 100...
    And(a=notaddress3, b=notaddress4, out=tmpaddr100);
    And(a=tmpaddr100, b=address[5], out=sel100);
    To16(sel=sel100, out=out16of100);
    And16(a=out16of100, b=in, out=in100);

    RAM8(in=in100, load=load, address=last3address, out=out100);

    // 101...
    And(a=address[3], b=notaddress4, out=tmpaddr101);
    And(a=tmpaddr101, b=address[5], out=sel101);
    To16(sel=sel101, out=out16of101);
    And16(a=out16of101, b=in, out=in101);

    RAM8(in=in101, load=load, address=last3address, out=out101);

    // 110...
    And(a=notaddress3, b=address[4], out=tmpaddr110);
    And(a=tmpaddr110, b=address[5], out=sel110);
    To16(sel=sel110, out=out16of110);
    And16(a=out16of110, b=in, out=in110);

    RAM8(in=in110, load=load, address=last3address, out=out110);

    // 111...
    And(a=address[3], b=address[4], out=tmpaddr111);
    And(a=tmpaddr111, b=address[5], out=sel111);
    To16(sel=sel111, out=out16of111);
    And16(a=out16of111, b=in, out=in111);

    RAM8(in=in111, load=load, address=last3address, out=out111);

    And16(a=out000, b=out001, out=tmp0);
    And16(a=out010, b=out011, out=tmp1);
    And16(a=out100, b=out101, out=tmp2);
    And16(a=out110, b=out111, out=tmp3);

    And16(a=tmp0, b=tmp1, out=tmp4);
    And16(a=tmp2, b=tmp3, out=tmp5);

    And16(a=tmp4, b=tmp5, out=out);
}